name: Run Lichess Bot (Direct Black Move Live)

on:
  workflow_dispatch:
    inputs:
      elo:
        description: "Elo simul√© par Stockfish (1350‚Äì2850)"
        required: false
        default: "1750"

permissions:
  contents: write

jobs:
  bot:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      # 1) R√©cup√©ration du d√©p√¥t
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Sauvegarder Elo choisi dans bot_elo.txt
      - name: Save Elo to bot_elo.txt
        run: |
          mkdir -p data
          ELO="${{ github.event.inputs.elo }}"
          if [ -z "$ELO" ] || [ "$ELO" = "null" ]; then
            echo "‚ö†Ô∏è Aucun Elo fourni en entr√©e, utilisation de la valeur par d√©faut 1750."
            ELO=1750
          fi
          echo "$ELO" > data/bot_elo.txt
          echo "üéØ Elo choisi: $ELO"
          echo "üíæ Contenu actuel de data/bot_elo.txt : $(cat data/bot_elo.txt)"

      # 3) Installer Stockfish + d√©pendances Python
      - name: Install Stockfish & Python deps
        run: |
          sudo apt-get update
          sudo apt-get install -y stockfish python3-pip jq
          python3 -m pip install --upgrade pip
          python3 -m pip install python-chess requests

      # 4) Jouer le coup noir (live avec account/playing)
      - name: Play best black move (live)
        env:
          LICHESS_BOT_TOKEN: ${{ secrets.LICHESS_BOT_TOKEN }}
        run: |
          mkdir -p data

          echo "üìÇ V√©rification bot_elo.txt avant lancement:"
          cat data/bot_elo.txt || echo "‚ùå Fichier bot_elo.txt introuvable"

          # R√©cup√©rer infos partie en live
          GAME_JSON=$(curl -s -H "Authorization: Bearer $LICHESS_BOT_TOKEN" https://lichess.org/api/account/playing)
          GAME_ID=$(echo "$GAME_JSON" | jq -r '.nowPlaying[] | select(.isMyTurn == true and .color == "black") | .gameId')

          if [ -z "$GAME_ID" ] || [ "$GAME_ID" = "null" ]; then
            echo "‚ö†Ô∏è Aucune partie trouv√©e o√π c'est au bot noir de jouer."
            exit 0
          fi

          echo "‚ôüÔ∏è Partie d√©tect√©e: $GAME_ID"
          export GAME_ID

          # Sauvegarder JSON brut (debug/trace)
          echo "$GAME_JSON" > data/account_playing.json

          # Extraire FEN + moves
          GAME_FEN=$(echo "$GAME_JSON" | jq -r '.nowPlaying[] | select(.gameId=="'"$GAME_ID"'") | .fen')
          GAME_MOVES=$(echo "$GAME_JSON" | jq -r '.nowPlaying[] | select(.gameId=="'"$GAME_ID"'") | .moves')

          echo "$GAME_FEN" > data/position_before_black.fen
          echo "$GAME_MOVES" > data/moves_before_black.txt

          # Script Python pour jouer le coup noir
          cat > play_move.py <<'PY'
          import os, json, shutil, chess, chess.engine, requests
          from pathlib import Path
          from datetime import datetime, timezone

          data_dir = Path("data")
          game_id = os.environ["GAME_ID"]
          token = os.environ["LICHESS_BOT_TOKEN"]

          # Lire Elo depuis bot_elo.txt
          elo_file = data_dir / "bot_elo.txt"
          if elo_file.exists():
              elo = int(elo_file.read_text(encoding="utf-8").strip())
              print(f"üìå Elo lu depuis bot_elo.txt: {elo}")
          else:
              elo = 1500
              print("‚ö†Ô∏è bot_elo.txt introuvable, fallback 1500")

          # Lire FEN et moves
          fen_path = data_dir / "position_before_black.fen"
          moves_path = data_dir / "moves_before_black.txt"
          fen = fen_path.read_text(encoding="utf-8").strip()
          moves = moves_path.read_text(encoding="utf-8").strip().split()

          board = chess.Board(fen)

          print("üìú Historique des coups (UCI):", " ".join(moves))
          print("FEN serveur:", fen)

          if board.is_game_over():
              print("‚ö†Ô∏è Partie termin√©e, aucun coup jou√©.")
              exit(0)

          if board.turn != chess.BLACK:
              print("‚ö†Ô∏è Ce n'est pas aux Noirs de jouer.")
              exit(0)

          # Choix du coup via Stockfish
          stockfish_path = shutil.which("stockfish")
          if not stockfish_path:
              print("‚ùå Stockfish introuvable")
              exit(0)

          engine = chess.engine.SimpleEngine.popen_uci(stockfish_path)
          engine.configure({"UCI_LimitStrength": True, "UCI_Elo": elo})
          result = engine.play(board, chess.engine.Limit(time=1.0))
          move = result.move
          engine.quit()

          print(f"ü§ñ Coup choisi par Stockfish Elo={elo}: {move.uci()}")
          board.push(move)

          # Envoi √† Lichess
          url = f"https://lichess.org/api/bot/game/{game_id}/move/{move.uci()}"
          headers = {"Authorization": f"Bearer {token}"}
          r = requests.post(url, headers=headers)
          print(f"üì§ POST {url} -> {r.status_code} {r.text}")
          if r.status_code != 200:
              exit(1)

          # Sauvegarde FEN apr√®s coup
          fen_after = board.fen()
          (data_dir / "position.fen").write_text(fen_after, encoding="utf-8")

          (data_dir / "dernier_coup.json").write_text(
              json.dumps({
                  "dernier_coup": move.uci(),
                  "fen": fen_after,
                  "horodatage": datetime.now(timezone.utc).isoformat()
              }, ensure_ascii=False, indent=2),
              encoding="utf-8"
          )

          history_file = data_dir / "move_history.json"
          history = []
          if history_file.exists():
              try:
                  history = json.loads(history_file.read_text(encoding="utf-8"))
                  if not isinstance(history, list):
                      history = []
              except Exception:
                  history = []
          history.append({
              "couleur": "noir",
              "coup": move.uci(),
              "fen_apres": fen_after,
              "horodatage": datetime.now(timezone.utc).isoformat()
          })
          history_file.write_text(json.dumps(history, ensure_ascii=False, indent=2), encoding="utf-8")

          print("‚úÖ position.fen, dernier_coup.json, move_history.json mis √† jour")
          PY

          python3 play_move.py

      # 5) Commit & push avec rebase
      - name: Commit updated files
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git pull --rebase origin main || true
          git add data/position.fen data/dernier_coup.json data/move_history.json data/bot_elo.txt || true
          git diff --cached --quiet || git commit -m "MAJ apr√®s coup noir"
          git push --force-with-lease origin main || true
