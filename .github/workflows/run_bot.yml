name: Run Lichess Bot (Direct Black Move Live)

on:
  workflow_dispatch:
    inputs:
      elo:
        description: "Elo simulé"
        required: true
        default: "1500"
      mode:
        description: "Mode de jeu (uci, random, depth)"
        required: false
        default: "uci"
      depth:
        description: "Profondeur max (uniquement si mode=depth)"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  bot:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      # 1) Récupération du dépôt
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Installer Stockfish + dépendances Python
      - name: Install Stockfish & Python deps
        run: |
          sudo apt-get update
          sudo apt-get install -y stockfish python3-pip jq
          python3 -m pip install --upgrade pip
          python3 -m pip install python-chess requests

      # 3) Jouer le coup noir (live avec account/playing)
      - name: Play best black move (live)
        env:
          LICHESS_BOT_TOKEN: ${{ secrets.LICHESS_BOT_TOKEN }}
          BOT_ELO: ${{ github.event.inputs.elo }}
          BOT_MODE: ${{ github.event.inputs.mode }}
          BOT_DEPTH: ${{ github.event.inputs.depth }}
        run: |
          mkdir -p data

          echo "📂 Vérification bot_elo.txt avant lancement:"
          echo "$BOT_ELO" > data/bot_elo.txt
          cat data/bot_elo.txt

          # Récupérer infos partie en live
          GAME_JSON=$(curl -s -H "Authorization: Bearer $LICHESS_BOT_TOKEN" https://lichess.org/api/account/playing)
          GAME_ID=$(echo "$GAME_JSON" | jq -r '.nowPlaying[] | select(.isMyTurn == true and .color == "black") | .gameId')

          if [ -z "$GAME_ID" ] || [ "$GAME_ID" = "null" ]; then
            echo "⚠️ Aucune partie trouvée où c'est au bot noir de jouer."
            exit 0
          fi

          echo "♟️ Partie détectée: $GAME_ID"
          export GAME_ID

          # Sauvegarder JSON brut (debug/trace)
          echo "$GAME_JSON" > data/account_playing.json

          # Extraire FEN + moves
          GAME_FEN=$(echo "$GAME_JSON" | jq -r '.nowPlaying[] | select(.gameId=="'"$GAME_ID"'") | .fen')
          GAME_MOVES=$(echo "$GAME_JSON" | jq -r '.nowPlaying[] | select(.gameId=="'"$GAME_ID"'") | .moves')

          echo "$GAME_FEN" > data/position_before_black.fen
          echo "$GAME_MOVES" > data/moves_before_black.txt

          # Script Python pour jouer le coup noir
          cat > play_move.py <<'PY'
          import os, json, shutil, chess, chess.engine, requests, random
          from pathlib import Path
          from datetime import datetime, timezone

          data_dir = Path("data")
          game_id = os.environ["GAME_ID"]
          token = os.environ["LICHESS_BOT_TOKEN"]

          elo = int(os.environ.get("BOT_ELO", "1500"))
          mode = os.environ.get("BOT_MODE", "uci")
          depth = os.environ.get("BOT_DEPTH", "")

          print(f"⚙️ Mode={mode}, Elo={elo}, Depth={depth}")

          fen_path = data_dir / "position_before_black.fen"
          moves_path = data_dir / "moves_before_black.txt"
          fen = fen_path.read_text(encoding="utf-8").strip()
          moves = moves_path.read_text(encoding="utf-8").strip().split()

          board = chess.Board(fen)

          print("📜 Historique des coups (UCI):", " ".join(moves))
          print("FEN serveur:", fen)

          if board.is_game_over():
              print("⚠️ Partie terminée, aucun coup joué.")
              exit(0)

          if board.turn != chess.BLACK:
              print("⚠️ Ce n'est pas aux Noirs de jouer.")
              exit(0)

          # Choix du coup
          move = None
          if mode == "random":
              move = random.choice(list(board.legal_moves))
              print(f"🎲 Coup choisi au hasard: {move.uci()}")
          else:
              stockfish_path = shutil.which("stockfish")
              if not stockfish_path:
                  print("❌ Stockfish introuvable")
                  exit(0)
              engine = chess.engine.SimpleEngine.popen_uci(stockfish_path)

              if mode == "depth" and depth.isdigit():
                  result = engine.play(board, chess.engine.Limit(depth=int(depth)))
              else:
                  engine.configure({"UCI_LimitStrength": True, "UCI_Elo": elo})
                  result = engine.play(board, chess.engine.Limit(time=1.0))

              move = result.move
              engine.quit()
              print(f"🤖 Coup choisi par Stockfish: {move.uci()}")

          board.push(move)

          # Envoi à Lichess
          url = f"https://lichess.org/api/bot/game/{game_id}/move/{move.uci()}"
          headers = {"Authorization": f"Bearer {token}"}
          r = requests.post(url, headers=headers)
          print(f"📤 POST {url} -> {r.status_code} {r.text}")
          if r.status_code != 200:
              exit(1)

          # Sauvegarde
          fen_after = board.fen()
          (data_dir / "position.fen").write_text(fen_after, encoding="utf-8")
          (data_dir / "dernier_coup.json").write_text(
              json.dumps({
                  "dernier_coup": move.uci(),
                  "fen": fen_after,
                  "horodatage": datetime.now(timezone.utc).isoformat()
              }, ensure_ascii=False, indent=2),
              encoding="utf-8"
          )
          print("✅ position.fen et dernier_coup.json mis à jour")
          PY

          python3 play_move.py

      # 4) Commit & push avec rebase
      - name: Commit updated files
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git pull --rebase origin main || true
          git add data/position.fen data/dernier_coup.json data/move_history.json data/bot_elo.txt || true
          git diff --cached --quiet || git commit -m "MAJ après coup noir"
          git push --force-with-lease origin main || true
