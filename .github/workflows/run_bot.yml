name: Run Lichess Bot (Direct Black Move Live)

on:
  workflow_dispatch:
    inputs:
      elo:
        description: "Elo simul√©"
        required: true
        default: "1500"
      mode:
        description: "Mode de jeu (uci, random, depth)"
        required: false
        default: "uci"
      depth:
        description: "Profondeur max (uniquement si mode=depth)"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  bot:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      # 1) R√©cup√©ration du d√©p√¥t
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Installer Stockfish + d√©pendances Python
      - name: Install Stockfish & Python deps
        run: |
          sudo apt-get update
          sudo apt-get install -y stockfish python3-pip jq
          python3 -m pip install --upgrade pip
          python3 -m pip install python-chess requests

      # 3) Jouer le coup noir (live avec account/playing)
      - name: Play best black move (live)
        env:
          LICHESS_BOT_TOKEN: ${{ secrets.LICHESS_BOT_TOKEN }}
          BOT_ELO: ${{ github.event.inputs.elo }}
          BOT_MODE: ${{ github.event.inputs.mode }}
          BOT_DEPTH: ${{ github.event.inputs.depth }}
        run: |
          mkdir -p data

          echo "üìÇ V√©rification bot_elo.txt avant lancement:"
          echo "$BOT_ELO" > data/bot_elo.txt
          cat data/bot_elo.txt

          # R√©cup√©rer infos partie en live
          GAME_JSON=$(curl -s -H "Authorization: Bearer $LICHESS_BOT_TOKEN" https://lichess.org/api/account/playing)
          GAME_ID=$(echo "$GAME_JSON" | jq -r '.nowPlaying[] | select(.isMyTurn == true and .color == "black") | .gameId')

          if [ -z "$GAME_ID" ] || [ "$GAME_ID" = "null" ]; then
            echo "‚ö†Ô∏è Aucune partie trouv√©e o√π c'est au bot noir de jouer."
            exit 0
          fi

          echo "‚ôüÔ∏è Partie d√©tect√©e: $GAME_ID"
          export GAME_ID

          # Sauvegarder JSON brut (debug/trace)
          echo "$GAME_JSON" > data/account_playing.json

          # Extraire FEN
          GAME_FEN=$(echo "$GAME_JSON" | jq -r '.nowPlaying[] | select(.gameId=="'"$GAME_ID"'") | .fen')
          echo "$GAME_FEN" > data/position_before_black.fen

          # Script Python pour jouer le coup noir
          cat > play_move.py <<'PY'
          import os, json, shutil, chess, chess.engine, requests, random
          from pathlib import Path
          from datetime import datetime, timezone

          data_dir = Path("data")
          game_id = os.environ["GAME_ID"]
          token = os.environ["LICHESS_BOT_TOKEN"]

          elo = int(os.environ.get("BOT_ELO", "1500"))
          mode = os.environ.get("BOT_MODE", "uci")
          depth = os.environ.get("BOT_DEPTH", "")

          fen_path = data_dir / "position_before_black.fen"
          fen = fen_path.read_text(encoding="utf-8").strip()
          board = chess.Board(fen)

          if board.is_game_over() or board.turn != chess.BLACK:
              print("‚ö†Ô∏è Partie termin√©e ou pas au tour des Noirs.")
              raise SystemExit(0)

          # === Choix du coup noir ===
          if mode == "random":
              move = random.choice(list(board.legal_moves))
          else:
              stockfish_path = shutil.which("stockfish")
              if not stockfish_path:
                  print("‚ùå Stockfish introuvable")
                  raise SystemExit(1)
              engine = chess.engine.SimpleEngine.popen_uci(stockfish_path)
              if mode == "depth" and depth.isdigit():
                  result = engine.play(board, chess.engine.Limit(depth=int(depth)))
              else:
                  engine.configure({"UCI_LimitStrength": True, "UCI_Elo": elo})
                  result = engine.play(board, chess.engine.Limit(time=1.0))
              move = result.move
              engine.quit()

          # Calcul SAN du coup noir
          san_move = board.san(move)
          uci_move = move.uci()
          print(f"ü§ñ Coup choisi: {san_move} ({uci_move})")

          # Pousser le coup localement
          board.push(move)

          # Envoi √† Lichess
          url = f"https://lichess.org/api/bot/game/{game_id}/move/{uci_move}"
          headers = {"Authorization": f"Bearer {token}"}
          r = requests.post(url, headers=headers)
          print(f"üì§ POST {url} -> {r.status_code} {r.text}")
          if r.status_code != 200:
              print(f"‚ö†Ô∏è Coup envoy√© mais r√©ponse non-200: {r.status_code} {r.text}")

          # Sauvegarde FEN + dernier coup lisible
          fen_after_local = board.fen()
          (data_dir / "position.fen").write_text(fen_after_local, encoding="utf-8")
          (data_dir / "dernier_coup.json").write_text(
              json.dumps({
                  "dernier_coup": san_move,
                  "fen": fen_after_local,
                  "horodatage": datetime.now(timezone.utc).isoformat()
              }, ensure_ascii=False, indent=2),
              encoding="utf-8"
          )

          # === Mise √† jour move_history.json robuste ===
          history_file = data_dir / "move_history.json"
          try:
              if history_file.exists():
                  history = json.loads(history_file.read_text(encoding="utf-8"))
                  if not isinstance(history, list):
                      print("‚ö†Ô∏è move_history.json n'est pas une liste ‚Üí r√©initialis√©")
                      history = []
              else:
                  history = []
          except Exception as e:
              print(f"‚ö†Ô∏è Erreur lecture move_history.json: {e} ‚Üí r√©initialis√©")
              history = []

          entry = {
              "couleur": "noir",
              "coup": uci_move,
              "fen_apres": fen_after_local,
              "horodatage": datetime.now(timezone.utc).isoformat()
          }
          history.append(entry)

          history_file.write_text(
              json.dumps(history, ensure_ascii=False, indent=2),
              encoding="utf-8"
          )
          print(f"‚úÖ Coup noir ajout√© √† move_history.json ({uci_move})")
          PY

          python3 play_move.py

      # 3.5) Debug avant commit
      - name: Debug files before commit
        run: |
          echo "=== LS DATA ==="
          ls -la data
          echo "=== CONTENU move_history.json ==="
          cat data/move_history.json || echo "‚ùå move_history.json introuvable"
          echo "=== GIT STATUS ==="
          git status --short

      # 4) Commit & push
      - name: Commit & Push changes
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          # üîí Prot√©ger coup_blanc.txt : s'il a disparu, on recr√©e un placeholder
          if [ ! -f data/coup_blanc.txt ]; then
            echo "(placeholder)" > data/coup_blanc.txt
          fi

          git add -f data/coup_blanc.txt
          git add -f data/move_history.json
          git add -f data/position.fen data/dernier_coup.json || true

          git diff --cached --quiet || git commit -m "MAJ apr√®s coup noir"

          git pull --rebase origin main || true
          git push origin main
